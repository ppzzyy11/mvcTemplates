# MvcDemo
## 概述
这个工程给同学们呈现一个可以学习MVC相关知识的场景。工程上的逻辑是 Thymeleaf（前端触发） + Controller（接收前段请求，并调用Service） + Service（接收到请求后调用Mybatis） + Mybatis（Java访问数据库的方法） + H2（一个内置的数据库）。

## 运行
### Maven
编译+运行
```
mvn clean package
java -jar start/target/start-{{version}}.jar
```

### 尝试
如果程序没有报错就可以登陆链接，打开浏览器输入网址。同学们也可以用curl命令获取网页内容。这里默认使用了8080端口。
```
http://127.0.0.1:8080
curl "http://127.0.0.1:8080"
```

进入index.html静态页面，此时同学们可以点击网页中的“here”进入动态页面。也可以点击链接直接进入，链接放在了下面。
```
http://127.0.0.1:8080/greeting?name=Jack
curl "http://127.0.0.1:8080/greeting?name=Jack"
```
这个链接的意义会被映射到对应的Controller中，并且传递给Controller一个name的参数，参数的值为“Jack”。网页中的返回内容应该为,这部分数据是通过本文在概述中描述的流程取得的。

```
Hello, Jack!
age:38 years old
height:432 cm
weight:333 kg
```

用户可以在后面添加参数来返回不同的结果。我们还可以将name的值改为“1”，也就是下面的网址，得到的结果也一并列了出来。

```
http://127.0.0.1:8080/greeting?name=1
curl "http://127.0.0.1:8080/greeting?name=1"

Hello, 1!
age:18 years old
height:123 cm
weight:321 kg
```


我们在数据库中只插入了两条数据，同学们可以自己修改尝试。修改的文件为data.sql，大家可以参考本文的工程目录部分来找到这个文件的位置。



## 代码解读

```
.
├── README.md
├── model //这个module下定义了Mybatis
│   ├── pom.xml
│   └── src
│       └── main
│           └── java
│               └── com
│                   └── example
│                       └── mvcdemo
│                           └── mybatis//这个文件下的内容与start/resource/mappers下的mapper文件配合，可以在不实现接口的情况下直接读写数据库。这是Mybatis的特性
│                               ├── config
│                               │   └── MybatisDemoConfig.java //配置项，作用在于传递@ScanMapper的注解
│                               ├── entity
│                               │   └── MybatisDemoUser.java//数据实体，相当于我们从数据库中存取的内容
│                               └── mapper
│                                   └── MybatisDemoUserMapper.java//定义了读写的接口，具体实现在mapper文件中
├── pom.xml
├── service//负责业务逻辑
│   ├── pom.xml
│   ├── service.iml
│   └── src
│       └── main
│           └── java
│               └── com
│                   └── example
│                       └── mvcdemo
│                           ├── GetUserInfoService.java//Service的接口
│                           └── impl
│                               └── GetUserInfoServiceImpl.java//Service接口的实现
├── start//负责Spring程序启动
│   ├── pom.xml
│   └── src
│        └── main
│            ├── java
│            │   └── com
│            │       └── example
│            │           └── mvcdemo
│            │               └── start
│            │                   └── Application.java//启动类
│            └── resources//所有的资源文件都放在了这里
│                ├── application.properties//程序配置
│                ├── data.sql//向数据库中插入数据的语句
│                ├── mappers
│                │   └── mybatisdemouser-mapper.xml//Mapper文件，定义了model下的接口文件对应的MySql语句
│                ├── schema.sql//在数据库中建立表的语句
│                ├── static//静态网页文件
│                │   └── index.html
│                └── templates//Thymeleaf动态模板网页文件
│                    └── greeting.html
│   
├── tree
└── web//负责接收前端映射，并调用业务逻辑返回给前端
    ├── pom.xml
    └── src
        └── main
            └── java
                └── com
                    └── example
                        └── mvcdemo
                            └── controller
                                └── GreetingController.java//Controller，用于接收映射

39 directories, 31 files
```
### 启动
工程在启动的时候，会启动内置的Tomcat服务器和H2 database。其中Tomcat服务器服务前端，而H2 database则是数据库。H2在启动时会运行schema.sql和data.sql两个文件中俄的SQL语句，在数据库中建表、插数据。

此外，工程也有Spring Boot的启动流程，这部分不再赘述，同学们可以自己搜索学习。在本工程中需要提的是，在Application上有@SpringBootApplication(scanBasePackages = {"com.example.mvcdemo"})的标注指定了扫描包的范围；在MybatisDemoConfig上有标注@Configuration和@MapperScan("com.example.mvcdemo.mybatis.mapper")来保证Application可以扫描到MybatisDemoConfig，并且传递Mapper所在的package;GreetingController的@GetMapping("/greeting")用于指定127.0.0.1:8080/greeting的请求调用此函数。

### 一次用户调用
一次用户调用的顺序如下：

```
浏览器打开网页-> GreetingController接收请求->调用GetuserInforService->调用Mybatis->读取H2数据库->Controller根据得到的数据返回视图->前端得到页面
```


## 延伸阅读

Mybatis：https://mybatis.org/mybatis-3/zh/index.html

Thymeleaf: https://www.thymeleaf.org/

H2 Database: https://www.h2database.com/html/main.html

阿里脚手架：http://start.aliyun.com/
